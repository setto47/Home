Duplicating a Domain Controller (DC) from Windows Server 2016 to Windows Server 2022 while they cannot communicate directly presents challenges, but it is manageable by using tools like backups, metadata export, and configuration files. Below is a guide to help you accomplish this:

Plan Overview
	1.	Export all configuration and data from the Windows Server 2016 DC.
	2.	Set up the Windows Server 2022 DC with the same roles and settings.
	3.	Import the exported data/configuration to the new DC.
	4.	Reintegrate the new DC into your environment once both hardware and virtualization upgrades are complete.

Steps to Duplicate the DC

1. Export the Existing DC Configuration and Data

You’ll need to export the Active Directory configuration, DNS, Group Policy, and any additional settings:

a. Backup the Active Directory Database
	1.	Open Windows Server Backup on the 2016 server (ensure it’s installed if not).
	2.	Perform a System State Backup:
	•	Open wbadmin.msc.
	•	Select Local Backup > Backup Once > Custom > Add System State.
	•	Save the backup to a location accessible for transfer to the new server.

b. Export DNS Zones
	1.	Open DNS Manager (dnsmgmt.msc).
	2.	Right-click the DNS server > All Tasks > Backup.
	3.	Save the DNS zone configuration files.

c. Export Group Policy Objects (GPOs)
	1.	Open Group Policy Management Console (gpmc.msc).
	2.	Right-click on the Group Policy Objects container.
	3.	Use Backup All to save GPOs to a folder.

d. Export AD Configuration Metadata
	1.	Use the NTDSUtil tool to export metadata.
	•	Open PowerShell or Command Prompt as Admin.
	•	Run:

ntdsutil
metadata cleanup
quit


	•	Save the export file.

e. Export Additional Configurations
	•	DHCP: If DHCP is running on the DC, export the configuration using:

netsh dhcp server export C:\dhcp.txt all


	•	FSMO Role Holders: Document which FSMO roles are hosted on the DC using:

netdom query fsmo


	•	Certificates (if applicable): Export any installed certificates.

2. Set Up the Windows Server 2022 DC
	1.	Install Windows Server 2022 on the new ESXi host.
	2.	Install the AD DS and DNS roles on the new server.
	•	Use Server Manager or PowerShell:

Install-WindowsFeature AD-Domain-Services -IncludeManagementTools
Install-WindowsFeature DNS -IncludeManagementTools


	3.	Promote the new server to a Domain Controller:
	•	Since the two servers can’t communicate, select Create a new domain in an existing forest, and re-import the configuration manually in the next steps.

3. Import Configuration and Data

a. Restore the System State
	1.	Transfer the System State Backup to the new 2022 DC.
	2.	Use Windows Server Backup to restore the System State.
	•	Open Windows Server Backup.
	•	Select Recover and point to the transferred backup.

b. Import DNS Configuration
	1.	Open DNS Manager on the 2022 server.
	2.	Restore the DNS zone files to the new server.

c. Import Group Policy Objects
	1.	Use the Import Settings option in the Group Policy Management Console to restore the GPOs.

d. Restore DHCP Configuration
	1.	Transfer the dhcp.txt file to the new server.
	2.	Run:

netsh dhcp server import C:\dhcp.txt all

4. Verify and Finalize
	1.	Test all configurations to ensure that DNS, Active Directory, and GPOs are working correctly.
	2.	If FSMO roles were hosted on the 2016 DC, seize the FSMO roles manually:
	•	Run:

ntdsutil
roles
seize <role>
quit


Replace <role> with the FSMO role (e.g., schema master).

	3.	Reconnect the new DC to the environment once the hardware and virtualization upgrades are complete.

Key Considerations
	•	Offline Mode: Since the servers cannot communicate, ensure all changes are carefully documented to avoid discrepancies.
	•	Data Integrity: Always verify backups before transferring.
	•	Testing: Perform thorough testing on the new DC in a staging environment if possible before deploying it live.

This approach should help you duplicate your DC while upgrading both the hardware and the operating system. Let me know if you need detailed commands or assistance with specific tools!

Using New-ADDCCloneConfigFile to create a clone of your Domain Controller has both advantages and limitations, and whether it is “better” or “worse” depends on your scenario. Below is a comparison of using New-ADDCCloneConfigFile versus the method described earlier.

What New-ADDCCloneConfigFile Does

This PowerShell cmdlet is used to create a configuration file that allows you to clone an existing Domain Controller in a supported environment. It’s part of the DC cloning process introduced in Windows Server 2012.

Requirements for New-ADDCCloneConfigFile:
	1.	The Domain Controller must be virtualized and hosted on a hypervisor that supports cloning.
	2.	The DC being cloned must be a member of the “Cloneable Domain Controllers” group.
	3.	Certain roles and services (e.g., DHCP server) need to be excluded or reconfigured during the cloning process.
	4.	The servers must communicate at least initially for replication after cloning.

Key Differences:

1. Connectivity Between Servers
	•	New-ADDCCloneConfigFile (Worse in Your Case): Requires initial communication between the source and target servers because the cloned DC must be part of the same domain and replicate data after cloning. Since your servers cannot talk due to hardware changes, this makes cloning impossible in your scenario.
	•	Export/Import Process (Better in Your Case): Does not require the servers to communicate. It relies on backups, metadata exports, and manual restoration, which is ideal for isolated environments.

2. Complexity
	•	New-ADDCCloneConfigFile (Simpler if Supported): The cmdlet simplifies the cloning process. It automatically configures the new DC with a copy of the source DC’s settings and joins it to the domain. This reduces the need for manual configuration.
	•	Export/Import Process (More Manual Work): Requires you to manually back up, transfer, and restore various components like Active Directory, DNS, and Group Policy. This is more labor-intensive and prone to errors.

3. Supported Roles
	•	New-ADDCCloneConfigFile (Limited): Certain roles (e.g., DHCP server) cannot be cloned and must be reconfigured separately. This limits its usefulness if your DC hosts additional services.
	•	Export/Import Process (More Flexible): Allows you to handle all roles manually, ensuring everything is replicated, including non-cloneable roles.

4. Time Efficiency
	•	New-ADDCCloneConfigFile (Faster): Once configured, cloning a DC is quick, as it automates much of the process.
	•	Export/Import Process (Slower): Manual steps for backup, export, transfer, and restoration can be time-consuming, especially in larger environments.

5. Upgrading the OS
	•	New-ADDCCloneConfigFile (Not an Upgrade Tool): Cloning a DC creates a copy on the same OS version. It does not support cross-version cloning (e.g., Server 2016 to Server 2022).
	•	Export/Import Process (Supports Upgrades): Allows you to upgrade the OS while transferring DC roles and configurations, making it suitable for your goal of moving from 2016 to 2022.

What’s Better for Your Case?

Since your servers cannot communicate and you are upgrading to Windows Server 2022, the export/import process is the better option. The New-ADDCCloneConfigFile cmdlet is designed for quick replication within a networked environment and for cloning to the same OS version. It will not work for your isolated setup or OS upgrade.

Recommendation

Stick to the export/import process described earlier. While it’s more manual, it ensures that:
	1.	Your Domain Controller is successfully moved to the newer OS and hardware.
	2.	All configurations, roles, and services are transferred correctly.
	3.	The process accommodates the isolated nature of your setup.

If you later have an environment where DC cloning is feasible, New-ADDCCloneConfigFile could be a useful tool for speeding up DC deployment within the same OS version and connected infrastructure.

You’re absolutely correct that the New-ADDCCloneConfigFile cmdlet creates a configuration file for cloning a Domain Controller. However, it doesn’t entirely eliminate the need for server connectivity. Here’s why:

How New-ADDCCloneConfigFile Works

The cmdlet generates a clone configuration file (DCCloneConfig.xml) that provides instructions for the cloned DC when it starts. This file contains:
	•	Network configuration (e.g., IP address, DNS server).
	•	Site information (to determine which AD site it belongs to).
	•	Services to be included or excluded during cloning.

When the cloned DC boots up, it:
	1.	Reads the DCCloneConfig.xml file.
	2.	Registers itself as a new DC in Active Directory.
	3.	Replicates AD data and configuration from the existing DCs in the domain.

Why Connectivity is Typically Required
	1.	Replication
The cloning process relies on Active Directory replication to copy the AD database (NTDS.dit) and synchronize directory information to the new DC. Without connectivity to other DCs, the cloned DC cannot:
	•	Join the domain.
	•	Receive updates to the AD database or other configuration.
	2.	FSMO Roles
Cloned DCs do not automatically transfer FSMO roles. These roles are critical for domain functionality, and you would need connectivity to move them between servers.
	3.	Verification During Cloning
The new DC must contact the PDC Emulator to verify that cloning is permitted and that it is a valid DC clone.

What Happens Without Connectivity

If the cloned DC cannot connect to the source DC or other domain controllers:
	•	It will not be able to replicate the AD database.
	•	It may boot into Directory Services Repair Mode (DSRM) because it cannot authenticate or communicate with the domain.

Why New-ADDCCloneConfigFile Alone Won’t Work for Your Scenario

Since your servers cannot communicate, the cloning process cannot complete because:
	1.	The new DC won’t be able to register itself or replicate AD data.
	2.	There’s no mechanism for synchronizing AD or DNS data across the isolated environments.

What You Can Do Instead

In your case, where connectivity isn’t possible, the export/import method is the only viable solution:
	1.	Perform a System State Backup of the existing DC to capture the AD database, DNS, and other settings.
	2.	Restore that backup on the new server running Windows Server 2022.
	3.	Manually configure any non-replicated roles or services (like DHCP or custom configurations).

This approach bypasses the need for live replication and allows you to migrate your DC to a new server, even in an isolated environment.

Conclusion

While New-ADDCCloneConfigFile simplifies DC cloning in connected environments, it cannot replace connectivity for replication and domain integration. Since your servers are isolated, the export/import method is your best option for duplicating the DC to a newer OS and hardware. If the servers could communicate, cloning would be an excellent choice for rapid deployment.
